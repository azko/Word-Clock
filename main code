/* 
 * Word Clock
 * 
 * This clock is built to display spelled out words depending on the time of day.
 * The code depends on both an RTC and Addressable RGB LEDs
 * 
 * RTC Chip used: DS1307 and connect via I2C interface (pins SCL & SDA)
 * RGB LEDs used: WS2812B LEDs on a 5v strip connected to pin 6
 *
 *
 */     
 

#include <Time.h> 
#include <Wire.h> // allows commnication between arduino and I2C devices (like the DS1307 RTC module)
#include <Adafruit_NeoPixel.h> // NeoPixel Library
#include <DS1307RTC.h>  // a basic DS1307 library that returns time as a time_t
#include <Adafruit_GFX.h> // a neomatrix library to 
#include <Adafruit_NeoMatrix.h>
#include "RGB.h"

#define PIN    6  // which pin on arduino is connected to the LED's
#define FWDButtonPIN 9  // Which pin on arduino is connected to FWD pushbutton
#define REVButtonPIN 8  // Which pin on arduino is connected to REV pushbutton

#define NUMPIXELS 144 // 12 x 12 grid - number of pixels

#define BRIGHTNESSDAY 50 // half on
#define BRIGHTNESSNIGHT 25 // one third on

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(12, 12, PIN,
  NEO_MATRIX_TOP     + NEO_MATRIX_LEFT +
  NEO_MATRIX_ROWS + NEO_MATRIX_ZIGZAG,
  NEO_GRB            + NEO_KHZ800);

boolean isPast = false; // initial setting of isPast boolean term; shows O'Clock when set to 'true'

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800); // When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.

void setup(void) {
    Serial.begin(115200);
 
    pixels.begin(); // This initializes the NeoPixel library.
   
    // setSyncProvider() causes the Time library to synchronize with the external RTC by calling RTC.get() every five minutes by default.
    setSyncProvider(RTC.get);
    Serial << F("RTC Sync");
    if (timeStatus() != timeSet) Serial << F(" FAIL!");
    Serial << endl;
}
  // lets kick off the welcome message
  matrix.show();
  String welcome = "Jess' Word Clock v3.0 - March 2016";
  scrollText(welcome);
  digitalClockDisplay();
  }
  
void loop(void){
  static time_t tLast;
  time_t t;
  tmElements_t tm;
  
 // Check for input to set the RTC, minimum length is 12, i.e. yy,m,d,h,m,s
    if (Serial.available() >= 12) {
        int y = Serial.parseInt();
        if (y >= 100 && y < 1000)
            Serial << F("Error: Year must be two digits or four digits!") << endl;
        else {
            if (y >= 1000) {
                tm.Year = CalendarYrToTm(y);
            } else {
                tm.Year = y2kYearToTm(y);
            }
           
            tm.Month = Serial.parseInt();
            tm.Day = Serial.parseInt();
            tm.Hour = Serial.parseInt();
            tm.Minute = Serial.parseInt();
            tm.Second = Serial.parseInt();
           
            t = makeTime(tm);
           
            RTC.set(t);
            setTime(t);        
            Serial << F("RTC set to: ");
            printDateTime(t);
            Serial << endl;
           
            // Dump any extraneous input
            while (Serial.available() > 0) Serial.read();
        }
    }
 
  t = now();
    if (t != tLast) { // Time has changed since the last loop iteration
        tLast = t;
        printDateTime(t);
 
        // Log the temperature once per minute
        if (second(t) == 0) {
            float c = RTC.temperature() / 4.;
            float f = c * 9. / 5. + 32.;
            Serial << F("  ") << c << F(" C  ") << f << F(" F");
        }
 
        displayLeds(t);
       
        Serial << endl;
    }
}

void displayLeds(time_t t) {
    pixels.clear();
 
    // Flash "Merry Christmas" special message if date is between 22nd Dec and 28th Dec.
    if((day(t) >= 22 && day(t) <= 28) && month(t) == 12 && ((second(t) % 5) == 0 || (second(t) % 5) == 1)) {
      showMerryChristmas();
    } else {
      showItIs();
 
      if(minute(t) < 5) {
        isPast = true;
        showOclock();
      } else if(minute(t) < 10) {
        showFive();
        showPast();
      } else if(minute(t) < 15) {
        showTen();
        showPast();
      } else if(minute(t) < 20) {
        showQuarter();
        showPast();
      } else if(minute(t) < 25) {
        showTwenty();
        showPast();
      } else if(minute(t) < 30) {
        showTwentyFive();
        showPast();
      } else if(minute(t) < 35) {
        showHalf();
        showPast();
      } else if(minute(t) < 40) {
        showTwentyFive();
        showTo();
      } else if(minute(t) < 45) {
        showTwenty();
        showTo();
      } else if(minute(t) < 50) {
        showQuarter();
        showTo();
      } else if(minute(t) < 55) {
        showTen();
        showTo();
      } else {
        showFive();
        showTo();
      }
 
      if(hour(t) == 0 || hour(t) == 12) {
        if(isPast) {
          showHourTwelve();
        } else {
          showHourOne();
        }
      } else if(hour(t) == 1 || hour(t) == 13) {
        if(isPast) {
          showHourOne();
        } else {
          showHourTwo();
        }
      } else if(hour(t) == 2 || hour(t) == 14) {
        if(isPast) {
          showHourTwo();
        } else {
          showHourThree();
        }
      } else if(hour(t) == 3 || hour(t) == 15) {
        if(isPast) {
          showHourThree();
        } else {
          showHourFour();
        }
      } else if(hour(t) == 4 || hour(t) == 16) {
        if(isPast) {
          showHourFour();
        } else {
          showHourFive();
        }
      } else if(hour(t) == 5 || hour(t) == 17) {
        if(isPast) {
          showHourFive();
        } else {
          showHourSix();
        }
      } else if(hour(t) == 6 || hour(t) == 18) {
        if(isPast) {
          showHourSix();
        } else {
          showHourSeven();
        }
      } else if(hour(t) == 7 || hour(t) == 19) {
        if(isPast) {
          showHourSeven();
        } else {
          showHourEight();
        }
      } else if(hour(t) == 8 || hour(t) == 20) {
        if(isPast) {
          showHourEight();
        } else {
          showHourNine();
        }
      } else if(hour(t) == 9 || hour(t) == 21) {
        if(isPast) {
          showHourNine();
        } else {
          showHourTen();
        }
      } else if(hour(t) == 10 || hour(t) == 22) {
        if(isPast) {
          showHourTen();
        } else {
          showHourEleven();
        }
      } else if(hour(t) == 11 || hour(t) == 23) {
        if(isPast) {
          showHourEleven();
        } else {
          showHourTwelve();
        }
      }
    }
 
    pixels.show(); // This sends the updated pixel color to the hardware.
} 
 
void displayTime(){
  
    if((day() >= 22 && day() <= 24) && month() == 8 && ((second() % 5) == 0 || (second() % 5) == 1)) {
      showHappyBirthdayJess();
    } else {
      grid.show();
    }

// Shows Merry Xmas function
    if((day() >= 22 && day() <= 28) && month() == 12 && ((second() % 5) == 0 || (second() % 5) == 1)) {
      showMerryChristmas();
    } else {
      grid.show();
    }
 

void rainbow(uint8_t wait) {
  //secret rainbow mode - use this for Happy Birthday message
  uint16_t i, j;
 
  for(j=0; j<256; j++) {
    for(i=0; i<grid.numPixels(); i++) {
      grid.setPixelColor(i, Wheel((i+j) & 255));
    }
    grid.show();
    delay(wait);
  }
}

void scrollText(String textToDisplay) {         // matrix scroll function

  int x = matrix.width();
  int pixelsInText = textToDisplay.length() * 11;
  
  matrix.setCursor(47,47);
  matrix.print(textToDisplay);
  matrix.show();
  
  while(x > (matrix.width() - pixelsInText)) {
    matrix.fillScreen(matrix.Color(teal.r, teal.g, teal.b));
    matrix.setCursor(--x, 0);
    matrix.print(textToDisplay);
    matrix.show();
    delay(150);
  }
}

void showItIs() {
  setPixelOn(0);
  setPixelOn(1);
 
  setPixelOn(3);
  setPixelOn(4);
}
 
void showTwenty() {
  setPixelOn(6);
  setPixelOn(7);
  setPixelOn(8);
  setPixelOn(9);
  setPixelOn(10);
  setPixelOn(11);
}
 
void showTwentyFive() {
  showTwenty();
  showFive();
}
 
void showQuarter() {
  setPixelOn(23);
  setPixelOn(22);
  setPixelOn(21);
  setPixelOn(20);
  setPixelOn(19);
  setPixelOn(18);
  setPixelOn(17);
}
 
void showHalf() {
  setPixelOn(15);
  setPixelOn(14);
  setPixelOn(13);
  setPixelOn(12);
}

void showMerryChristmas() {
  // Merry
  setPixelRed(42);
  setPixelGreen(41);
  setPixelRed(40);
  setPixelGreen(39);
  setPixelRed(38);
 
  // Christmas
  setPixelRed(71);
  setPixelGreen(70);
  setPixelRed(69);
  setPixelGreen(68);
  setPixelRed(67);
  setPixelGreen(66);
  setPixelRed(65);
  setPixelGreen(64);
  setPixelRed(63);
}

void showHappyBirthdayJess() {
  // Happy
  setPixelGreen(0);
  setPixelGreen(1);
  setPixelGreen(2);
  setPixelGreen(3);
  setPixelGreen(4);
 
  // Birthday
  setPixelGreen(48);
  setPixelGreen(49);
  setPixelGreen(50);
  setPixelGreen(51);
  setPixelGreen(52);
  setPixelGreen(53);
  setPixelGreen(54);
  setPixelGreen(55);
 
  // Jess
  setPixelRed(5);
  setPixelRed(6);
  setPixelRed(7);
  setPixelRed(8);
}

void showTen() {
  setPixelOn(24);
  setPixelOn(25);
  setPixelOn(26);
}
 
void showFive() {
  setPixelOn(28);
  setPixelOn(29);
  setPixelOn(30);
  setPixelOn(31);
}
 
void showPast() {
  isPast = true;
 
  setPixelOn(32);
  setPixelOn(33);
  setPixelOn(34);
  setPixelOn(35);
}
 
void showTo() {
  isPast = false;
 
  setPixelOn(72);
  setPixelOn(73);
}
 
void showOclock() {
  setPixelOn(138);
  setPixelOn(137);
  setPixelOn(136);
  setPixelOn(135);
  setPixelOn(134);
  setPixelOn(133);
  setPixelOn(132);
}
 
void showHourOne() {
  setPixelOn(81);
  setPixelOn(82);
  setPixelOn(83);
}
 
void showHourTwo() {
  setPixelOn(95);
  setPixelOn(94);
  setPixelOn(93);
}
 
void showHourThree() {
  setPixelOn(92);
  setPixelOn(91);
  setPixelOn(90);
  setPixelOn(89);
  setPixelOn(88);
}
 
void showHourFour() {
  setPixelOn(87);
  setPixelOn(86);
  setPixelOn(85);
  setPixelOn(84);
}
 
void showHourFive() {
  setPixelOn(96);
  setPixelOn(97);
  setPixelOn(98);
  setPixelOn(99);
}
 
void showHourSix() {
  setPixelOn(100);
  setPixelOn(101);
  setPixelOn(102);
}
 
void showHourSeven() {
  setPixelOn(103);
  setPixelOn(104);
  setPixelOn(105);
  setPixelOn(106);
  setPixelOn(107);
}
 
void showHourEight() {
  setPixelOn(119);
  setPixelOn(118);
  setPixelOn(117);
  setPixelOn(116);
  setPixelOn(115);
}
 
void showHourNine() {
  setPixelOn(114);
  setPixelOn(113);
  setPixelOn(112);
  setPixelOn(111);
}
 
void showHourTen() {
  setPixelOn(110);
  setPixelOn(109);
  setPixelOn(108);
}
 
void showHourEleven() {
  setPixelOn(126);
  setPixelOn(127);
  setPixelOn(128);
  setPixelOn(129);
  setPixelOn(130);
  setPixelOn(131);
}
 
void showHourTwelve() {
  setPixelOn(75);
  setPixelOn(76);
  setPixelOn(77);
  setPixelOn(78);
  setPixelOn(79);
  setPixelOn(80);
}
 
void setPixelOn(int pixel) {
    setPixelPink(pixel);
}

// setting color of individual pixels to red func
void setPixelRed(int pixel) {
    grid.setPixelColor(pixel, grid.Color(150,0,0));
}

// setting color of individual pixels to green func
void setPixelGreen(int pixel) {
    grid.setPixelColor(pixel, grid.Color(0,150,0));
}

void setPixelPink(int pixel) {
    pixels.setPixelColor(pixel, pixels.Color(150,0,80));
}
 
// Print date and time to Serial
void printDateTime(time_t t) {
    printDate(t);
    Serial << ' ';
    printTime(t);
}
 
// Print time to Serial
void printTime(time_t t) {
    printI00(hour(t), ':');
    printI00(minute(t), ':');
    printI00(second(t), ' ');
}
 
// Print date to Serial
void printDate(time_t t) {
    printI00(day(t), 0);
    Serial << monthShortStr(month(t)) << _DEC(year(t));
}
 
// Print an integer in "00" format (with leading zero),
// followed by a delimiter character to Serial.
// Input value assumed to be between 0 and 99.
void printI00(int val, char delim) {
    if (val < 10) Serial << '0';
    Serial << _DEC(val);
    if (delim > 0) Serial << delim;
    return;
} 
